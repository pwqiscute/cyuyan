int GetK(int *num1,int start1,int end1,int* num2,int start2,int end2,int k){
int len1=end1-start1+1;
int len2=end2-start2+1;
if(len1>len2) return GetK(num2,start2,end2,num1, start1,end1, k);
if(k==1) return (num1[start1]>num2[start2]?num2[start2]:num1[start1]);
if(len1==0) return num2[start2+k-1];

int i=start1+(len1>k/2?k/2:len1)-1;
int j=start2+(len2>k/2?k/2:len2)-1;

if(num1[i]>num2[j])
return  GetK(num1,start1,end1,num2,j+1,end2,k-(j-start2+1));
else
return GetK(num1,i+1,end1,num2,start2,end2,k-(i-start1+1));
}

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){
int n=nums1Size;
int m=nums2Size;
int left=(n+m+1)/2;
int right=(n+m+2)/2;
return (GetK(nums1,0,n-1,nums2,0,m-1,left)+GetK(nums1,0,n-1,nums2,0,m-1,right))*0.5;
}