void printf(const deque<int>& d) {
	for (deque<int>::const_iterator it = d.begin(); it != d.end(); it++) {
		cout << it[0] << " ";
	}
	cout << endl;
}
void test() {
	deque<int> d1;
	//尾插
	d1.push_back(10);
	d1.push_back(20);
	//头插
	d1.push_front(100);
	d1.push_front(200);

	printf(d1);

	//尾删
	d1.pop_back();
	printf(d1);
	//头删
	d1.pop_front();
	printf(d1);
}
void test02() {
	deque<int>d1;
	//尾插
	d1.push_back(10);
	d1.push_back(20);
	//头插
	d1.push_front(100);
	d1.push_front(200);

	d1.insert(d1.begin(), 1000);
	d1.insert(d1.begin(), 2, 10000);
	printf(d1);

	deque<int> d2;
	d2.push_back(1);
	d2.push_back(2);

	d1.insert(d1.begin(), d2.begin(), d2.end());
	printf(d1);
}
void test03() {
	deque<int>d1;
	//尾插
	d1.push_back(10);
	d1.push_back(20);
	//头插
	d1.push_front(100);
	d1.push_front(200);

	deque<int>::iterator it = d1.begin();
	it++;
	//d1.erase(it);
	d1.erase(d1.begin(), ++it);//删除从第一个迭代器和，第二个迭代器之间的数，后面是开区间
	d1.clear();
	printf(d1);
}
int main() {
	test03();
	test02();
	test();
}