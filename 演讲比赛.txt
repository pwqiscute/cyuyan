
#pragma once
#include<iostream>
using namespace std;

class Speaker {
public:
	string m_Name;
	double m_Score[2];
};
------------------------------
#pragma once
#include<map>
#include<deque>
#include<numeric>
#include<string>
#include<vector>
#include<fstream>
#include<algorithm>
#include <iostream>

#include"speaker.h"
using namespace std;
class SpeechMenager {
public:
	SpeechMenager();
	//初始化成员属性
	void initialize();
	//展示菜单
	void showmneu();
	//创建选手
	void createSpeaker();
	//开始比赛
	void startSpeech();
	//抽签
	void speechDarw();
	//比赛
	void speechContest();
	//显示得分
	void showScore();
	//退出系统
	void exitSystem();
	//保存到文件
	void saveRecord();
	//读取记录
	void loadRecord();
	//清除比赛记录
	void clearRecord();

	~SpeechMenager();
	//文件是否为空
	bool fileIsempty;
	//存放第一轮比赛选手的编号
	vector<int> v1;
	//存放第一轮胜出选手的编号
	vector<int> v2;
	//存放前三名选手的编号
	vector<int>vVictory;
	//存放编号和所对应选手
	map<int,Speaker>m_Speaker;
	//显示往届记录
	void showRecord();
	//存放往届记录的容器
	map<int, vector<string>>m_Rcord;
	//轮次
	int m_Index;
};


-------------------------------------------
#include"speechMenage.h"
SpeechMenager::SpeechMenager() {
	//初始化容器和属性
	this->initialize();
	//创建12名选手
	this->createSpeaker();

	this->loadRecord();
}
void SpeechMenager::initialize() {
	this->v1.clear();
	this->v2.clear();
	this->vVictory.clear();
	this->m_Speaker.clear();
	//将记录的容器也清空
	this->m_Rcord.clear();
	this->m_Index = 1;
}
void SpeechMenager::createSpeaker() {
	string nameSeed = "ABCDEFGHIJKL";
	for (int i = 0; i < nameSeed.size(); ++i) {
		string name = "选手";
		name += nameSeed[i];

		Speaker s;
		s.m_Name = name;
		for (int j = 0; j < 2; ++j) {
			s.m_Score[j] = 0;
		}
		//创建选手编号，放进v1容器中
		this->v1.push_back(i + 10001);
		//选手编号以及所对的选手
		this->m_Speaker.insert(make_pair(i + 10001, s));
	}
}
void SpeechMenager::speechDarw() {
	cout << "第" << this->m_Index << "比赛选手正在抽签" << endl;

	if (this->m_Index == 1) {
		//第一轮比赛
		random_shuffle(v1.begin(), v1.end());
		for (vector<int>::iterator it = v1.begin(); it != v1.end(); ++it) {
			cout << *it << " ";
		}
		cout << endl;
	}
	else {
		random_shuffle(v2.begin(), v2.end());
		for (vector<int>::iterator it = v2.begin(); it != v2.end(); ++it) {
			cout << *it << " ";
		}
		cout << endl;
	}
	cout << "--------------------" << endl;
	system("pause");
	cout << endl;
}
//比赛
void SpeechMenager::speechContest() {
	cout << "第" << this->m_Index << "轮比赛正式开始" << endl;
	//容器，存放小组成绩
	multimap<double, int, greater<double>> groupScore;

	int num = 1;//记录人员个数，6人一组

	vector<int>v_Src;//比赛人员容器
	if (m_Index == 1) {
		v_Src = v1;
	}
	else {
		v_Src = v2;
	}
	
	//遍历所有选手进行比赛
	for (vector<int>::iterator it = v_Src.begin(); it != v_Src.end(); ++it,num++) {
		//评委打分
		deque<double> d;
		for (int i = 0; i < 10; i++) {
			double score = (rand()%401+600)/10.f;
			d.push_back(score);
		}
		sort(d.begin(), d.end(), greater<double>());
		d.pop_back(); //去除最低分
		d.pop_front();//去除最高分

		double sum = accumulate(d.begin(), d.end(), 0.0f);
		double average = sum/(double)d.size();//平均分

		//将平均分放在map容器里
		m_Speaker[*it].m_Score[m_Index-1] = average;
		//存放数据
		groupScore.insert(make_pair(average, *it));//key是得分，value是编号；
		//每6人取出前三名
		if (num % 6 == 0) {
			cout << "第" << num / 6 << "小组比赛名次：" << endl;
			for (multimap<double, int, greater<double>>::iterator its = groupScore.begin(); its != groupScore.end(); ++its) {
				cout << "编号：" << its->second << "姓名：" << this->m_Speaker[its->second].m_Name << "得分是：" << this->m_Speaker[its->second].m_Score[this->m_Index - 1] << endl;
			}
			//取走前三名
			int count = 0;
			for (multimap<double, int, greater<double>>::iterator it = groupScore.begin(); it != groupScore.end()&&count<3;count++,it++) {
				if (this->m_Index == 1) {
					v2.push_back(it->second);
				}
				else
				{
					vVictory.push_back(it->second);
				}
			}
			groupScore.clear();
		}
	}
	cout << "------------------------第 " << this->m_Index << " 轮比赛完毕---------------------" << endl;
	system("pause");
}
//开始演讲
void SpeechMenager::startSpeech() {
	//第一轮开始比赛
	 // 1.抽签
	speechDarw();
	 //2.比赛
	speechContest();
	//3.显示晋级结果
	showScore();
	//第二轮开始比赛
	this->m_Index++;
	//1.抽签
	this->speechDarw();
	//2.比赛
	this->speechContest();
	//3.显示最终结果
	this->showScore();
	//4.保存到文件
	this->saveRecord();
	//读取文件到容器中
	this->loadRecord();

	cout << "本届比赛完毕" << endl;
	system("pause");
	system("cls");
}
//展示菜单
void SpeechMenager::showmneu() {
	cout << "********** 欢迎参加演讲比赛 ***************" << endl;
	cout << "********** 1.开始演讲比赛  ***************" << endl;
	cout << "********** 2.查看比赛记录 ***************" << endl;
	cout << "********** 3.清空比赛记录 ***************" << endl;
	cout << "********** 0.退出比赛程序 ***************" << endl;
}
//退出系统
void SpeechMenager::exitSystem() {
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}
//展示得分
void SpeechMenager::showScore() {
	cout << "--------------------第" << this->m_Index << "轮晋级选手的信息如下：-----------" << endl;

	vector<int>v;
	if (this->m_Index == 1) {
		v = v2;
	}
	else {
		v = vVictory;
	}
	for (vector<int>::iterator it = v.begin(); it != v.end(); ++it) {
		cout << "选手的编号：" << *it << "姓名：" << this->m_Speaker[*it].m_Name << "得分：" << this->m_Speaker[*it].m_Score[this->m_Index - 1] << endl;
	}
}
void SpeechMenager::saveRecord() {
	ofstream ofs("speech.csv",ios::out|ios::app);
	for (vector<int>::iterator it = this->vVictory.begin(); it != vVictory.end(); it++) {
		ofs << *it << "," << this->m_Speaker[*it].m_Score[1] << ",";
	}
	ofs << endl;
	ofs.close();
	cout << "已记录到文件中" << endl;
	this->fileIsempty = false;
}
//读取记录
void SpeechMenager::loadRecord() {
	ifstream ifs("speech.csv", ios::in);
	if (!ifs.is_open()) {
		this->fileIsempty = true;
		ifs.close();
		return;
	}
	char ch;
	ifs >> ch;
	if (ifs.eof()) {
		cout << "文件为空" << endl;
		this->fileIsempty = true;
		ifs.close();
		return;
	}
	this->fileIsempty = false;

	ifs.putback(ch);//将一个字符放在尾部

	vector<string> v;
  
	string data;
	int index = 1;
	while (ifs >> data) { 
		int pos = -1,start=0;
		//cout << data << endl;
		while (1) {

			pos = data.find(",", start);//从start处往后找，找到第一个“，”的位置，赋值给pos
			if (pos == -1) {
				break;
			}
			string temp = data.substr(start, pos - start);//获得两个“，”之间的子串
			v.push_back(temp);
			start = pos + 1;
		}
		this->m_Rcord.insert(make_pair(index, v));
			index++;	
			v.clear();
	}
	ifs.close(); 
}
void SpeechMenager::showRecord() {
	if (this->fileIsempty) {
		cout << "文件为空，或记录为空" << endl;
	}
	else {
		for (int i = 1; i <= this->m_Rcord.size(); ++i) {
			cout << "第" << i << "届" << "冠军编号：" << this->m_Rcord[i][0] << "得分：" << this->m_Rcord[i][1] << endl;
			cout << "第" << i << "届" << "亚军编号：" << this->m_Rcord[i][2] << "得分：" << this->m_Rcord[i][3] << endl;
			cout << "第" << i << "届" << "季军编号：" << this->m_Rcord[i][4] << "得分：" << this->m_Rcord[i][5] << endl;
		}
	}
	system("pause");
	system("cls");
}
void SpeechMenager::clearRecord() {
	cout << "确认清空？ 1:是  2：返回" << endl;
	int choice;
	cin >> choice;
	if (choice == 1) {
		ofstream ofs("speech.csv", ios::trunc);
		ofs.close();
		//初始化容器和属性
		this->initialize();
		//创建12名选手
		this->createSpeaker();

		this->loadRecord();
	}
	system("pause");
	system("cls");
}
//析构函数
SpeechMenager::~SpeechMenager() {

}
void Printf(char* num) {
	int len = strlen(num);
	bool Beginning = true;
	for (int i = 0; i < len; i++) {
		if (Beginning && num[i] != '0')
			Beginning = false;
		if (!Beginning)
			cout << num[i];
	}
	cout << " ";
}




----------------------------------------------
////#define _CRT_SECURE_NO_WARNINGS 1
#include"speechMenage.h"
//int main() {
//	srand((unsigned)time(NULL));
//	SpeechMenager s;
//	int choose = 0;
//	while (1) {
//		s.showmneu();
//		cin >> choose;
//		switch (choose) {
//		case 1:
//			s.startSpeech();
//			break;
//		case 2:
//			s.showRecord();
//			break;
//		case 3:
//			s.clearRecord();
//			break;
//		case 0:
//			cout << "退出系统" << endl;
//			s.exitSystem();
//			return 0;
//		default:
//			system("cls");
//			break;
//		}
//	}
//}