 int calculate(int a){
     if(a==7||a==9)
     return 4;
     return 3;
 }
void B(char *digits,char * result,char* a[10],char**res,int* returnSize,int index)
{
    if(index==strlen(digits)){
   res[*returnSize]=malloc((strlen(digits)+1)*sizeof(char));
   strcpy(res[*returnSize],result);
   res[(*returnSize)][strlen(digits)]='\0';
   (*returnSize)++;
        return;
    }
    else{
    int n=calculate(digits[index]-'0');
    for(int i=0;i<n;i++){
      result[index]=a[digits[index]-'0'][i];
          B(digits,result, a,res,returnSize,index+1);
    }
}
}
char ** letterCombinations(char * digits, int* returnSize){
int len=strlen(digits);
*returnSize=1;
char* a[10]={"\0","\0","abc\0","def\0","ghi\0","jkl\0","mno\0","pqrs\0","tuv\0","wxyz\0"};
for(int i=0;i<len;i++)
(*returnSize)*=calculate(digits[i]-'0');
char**res=malloc(sizeof(char*)*(*returnSize));
*returnSize=0;
char* result=(char*)malloc((strlen(digits)+1)*sizeof(char));
 B(digits,result,a,res,returnSize,0);
 return res;
}


-----------------------------------------------------------


void DGletterCombinations(char * digits, int* returnSize,char **letters,char *result,char **res,int idig)
{
    if(idig == strlen(digits))
    {
        res[(*returnSize)] = (char*)calloc(strlen(digits) + 1, sizeof(char));
        strcpy(res[(*returnSize)], result);
        res[(*returnSize)][strlen(digits)] = '\0';
        (*returnSize)++;  
        return ;
    }
    else
    {
        
        for(int ilet = 0; ilet < strlen(letters[digits[idig] - 50]); ilet++)
        {
            result[idig] = letters[digits[idig] - 50][ilet];
            DGletterCombinations(digits, returnSize, letters, result, res, idig + 1);
        }
    }
    
}
char **letterCombinations(char * digits, int* returnSize)
{
    (*returnSize) = 0;
    if(strlen(digits) == 0)
    {
        return NULL;
    }
    char *LetterBox[8] = {"abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    char *result = (char*)calloc(strlen(digits) + 1,sizeof(char));
    int lenth = strlen(LetterBox[digits[0] - 50]);
    for(int i = 1; i < strlen(digits); i++)
    {
        lenth *= strlen(LetterBox[digits[i] - 50]);
    }
    char **res = (char**)malloc(lenth*sizeof(char*));
    DGletterCombinations(digits, returnSize, LetterBox, result, res, 0);
    return res;
}