int a[3][4]={0};-----------a【0】表示第一行的数组名；a【1】表示第2行的数组名……
sizeof(a[0])----------------当a【0】单独放在sizeof内表示第一行的数组名-----4*4=16个bite
sizeof（a[0]+1)-------------这时a【0】不是单独放，表示第一行的第一个元素；+1为第一行第2个元素；
sizeof（a+1）---------------a虽然是2维数组的地址，但是不单独放，也无去地址//a表示首元素的地址，2维数组的首元素是表示的是它的第一行；a就是第一行的地址，就是一维数组的地址------a+1其实就是跳过第一行，表示第2行的地址；4/8；
sizeof（*（a+1））表示第2行的地址解引用，表示指向第2行的全部元素，4*4=16；
*（a+1）=a【1】----4*4=16；
sizeof（&a[0]+1)-----&a[0]指的是第一行地址；+1表示第2行的地址；4/8
sizeof（*（&a【0】+1））----第2行的地址进行解引用，指向所有第2行的元素----4*4=16；
sizeof（*a）---------a没有单独存在，表示第一行的地址，*a为指向所有第一行的元素---4*4=16；
sizeof（a【3】)--------表示第4行，怎么说sizeof不会真的去访问地址，它会根据类型分析，int【】【4】；如果第四行存在，里面有4个int类型的元素，就是和a【0】用法一致；
int main() {
	int a[4] = { 0 };
	printf("%d", sizeof(a));
	printf("%d", sizeof(a + 1));
}-------------------------------------------------和这个一样
